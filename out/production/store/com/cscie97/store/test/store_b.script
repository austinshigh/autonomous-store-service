
# Define a store - this creates a ledger and transfers 20000 Units to the store
define-store STORE002 storeName "costco" storeAddress "77 Elma St, San Luis, CA"

# Define an aisle within the store
define-aisle STORE002:1 aisleName AISLE_A aisleDescr "frozen food" location "floor"
define-aisle STORE002:2 aisleName AISLE_B aisleDescr "chocolate" location "floor"
define-aisle STORE002:3 aisleName AISLE_C aisleDescr "wine" location "floor"


# Define a new shelf within the store
define-shelf STORE002:1:SHELF001 shelfName DIARY_SHELF shelfLevel medium sheldDescr "frozen food" shelfTempEnum refrigerated
define-shelf STORE002:1:SHELF002 shelfName SWEETS_SHELF shelfLevel medium sheldDescr "sweets" shelfTempEnum ambient
define-shelf STORE002:2:SHELF001 shelfName CONDIMENTS_SHELF shelfLevel high sheldDescr "condiment" shelfTempEnum ambient

# Show the details of a store, aisles, and shelves
show-store STORE002
show-aisle STORE002:1
show-aisle STORE002:2
show-shelf STORE002:1:SHELF001
show-shelf STORE002:1:SHELF002
show-shelf STORE002:2:SHELF001


# Define a new products
define-product CHICKEN001 prodName chicken prodDescr "organic chicken" size 500g category "frozen food" unit_price 10 tempTempEnum refrigerated
define-product PIZZA001 prodName pizza prodDescr "pizza" size 600g category "condiments" unit_price 2 tempTempEnum ambient

# Show the details of the product
show-product CHICKEN001
show-product PIZZA001

# Define a new inventory item within the store
define-inventory INVENTORY001 location STORE002:1:SHELF001 capacity 20 count 19 product CHICKEN001
define-inventory INVENTORY002 location STORE002:1:SHELF002 capacity 30 count 23 product PIZZA001

# Show the details of the inventory
show-inventory INVENTORY001
show-inventory INVENTORY002


# Define 12 customers (9 registered who have 200 Units transferred from the master account = 10 transactions now)
define-customer CUSTOMER00001 first_name ann last_name fred type registered email_address "afred@gmail.com" account ann01
define-customer CUSTOMER00002 first_name ted last_name hill type registered email_address "thill@yahoo.com" account ted01
define-customer CUSTOMER00003 first_name jane last_name dan type guest email_address "jdan@gmail.com" account jane01
define-customer CUSTOMER00004 first_name tami last_name donny type registered email_address "tdonny@gmail.com" account tami01
define-customer CUSTOMER00005 first_name tayo last_name akin type registered email_address "takin@yahoo.com" account tayo01
define-customer CUSTOMER00006 first_name dami last_name davis type guest email_address "ddavis@gmail.com" account dami01
define-customer CUSTOMER00007 first_name ahmed last_name usman type registered email_address "ausman@gmail.com" account ahmed01
define-customer CUSTOMER00008 first_name jake last_name farm type registered email_address "jfarm@yahoo.com" account jake01
define-customer CUSTOMER00009 first_name hanna last_name alla type guest email_address "halla@gmail.com" account hanna01
define-customer CUSTOMER00010 first_name ruth last_name bosch type registered email_address "rbosch@gmail.com" account ruth01
define-customer CUSTOMER00011 first_name rose last_name lily type registered email_address "rlily@gmail.com" account rose01
define-customer CUSTOMER00012 first_name abby last_name gotham type registered email_address "agotham@gmail.com" account abby01


# Define device of type camera, robot, speakers, microphones, and turnstile
define-device CAMERA001 name front_door_camera type camera location STORE002:1
define-device CAMERA002 name right_end_camera type camera location STORE002:2
define-device ROBOT001 name r2d2 type robot location STORE002:1
define-device ROBOT002 name r2d3 type robot location STORE002:2
define-device ROBOT003 name r2d4 type robot location STORE002:2
define-device TURNSTILE001 name cashier1 type turnstile location STORE002:1
define-device TURNSTILE002 name cashier2 type turnstile location STORE002:2
define-device MICROPHONE001 name front-microphone type microphone location STORE002:1
define-device SPEAKER001 name middle-aisle-speaker type speaker location STORE002:2
define-device SPEAKER002 name middle-aisle-speaker type speaker location STORE002:3


# Create enter-store events for 3 customers
create-event TURNSTILE001 event "enter-store CUSTOMER00001 TURNSTILE001 STORE002:1"
create-event TURNSTILE002 event "enter-store CUSTOMER00002 TURNSTILE002 STORE002:2"
create-event TURNSTILE001 event "enter-store CUSTOMER00003 TURNSTILE001 STORE002:1"

# Create a customer-seen event for CUSTOMER00001 - location should change to {STORE002=3}
create-event CAMERA001 event "customer-seen CUSTOMER00001 STORE002:3"


# Create a fetch-product event - expect a command to 1 robot to fetch the product
# should return response to customer, max quantity available is 19
# robot should not be instructed to fetch product
create-event MICROPHONE001 event "fetch-product CUSTOMER00001 CHICKEN001 INVENTORY001 STORE002:1:SHELF001 20"


# Create a fetch-product event - expect a command to 1 robot to restock because inventory count is 14 (less than half of capacity)
create-event MICROPHONE001 event "fetch-product CUSTOMER00001 CHICKEN001 INVENTORY001 STORE002:1:SHELF001 6"

# Create a basket-event event (should show Alert message that sensor has malfunctioned because user cannot remove 20 products from shelf total quantity of 19)
create-event CAMERA001 event "basket-event CUSTOMER00001 CHICKEN001 INVENTORY001 STORE002:1:SHELF001 20"


# Create an emergency event - all turnstiles open, 1 attends to emergency and the rest help
# customers, while speakers announce for customers to leave store
create-event CAMERA001 event "emergency FIRE STORE002:1"


# 3 customers enter the STORE002 again
create-event TURNSTILE001 event "enter-store CUSTOMER00001 TURNSTILE001 STORE002:1"
create-event TURNSTILE002 event "enter-store CUSTOMER00002 TURNSTILE002 STORE002:2"
create-event TURNSTILE002 event "enter-store CUSTOMER00003 TURNSTILE002 STORE002:2"


# Should throw incorrect number of arguments error
create-event CAMERA002 "customer-seen CUSTOMER00003 STORE002:2"



# Create a basket-event event for CUSTOMER00001
create-event CAMERA001 event "basket-event CUSTOMER00001 CHICKEN001 INVENTORY001 STORE002:1:SHELF001 2"
create-event CAMERA002 event "basket-event CUSTOMER00001 PIZZA001 INVENTORY002 STORE002:1:SHELF002 5"
create-event CAMERA001 event "basket-event CUSTOMER00001 CHICKEN001 INVENTORY001 STORE002:1:SHELF001 2"


# Create a check-acc-bal event using a microphone - expect only one speaker to give response - total cost = 47
create-event MICROPHONE001 event "check-acc-bal CUSTOMER00001 STORE002:2"


# Create a checkout event
# Customer should be assisted to their car because basket weight is > 10lbs
create-event TURNSTILE001 event "checkout CUSTOMER00001 STORE002:1"